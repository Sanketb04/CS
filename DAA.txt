Exercise 2.1: If – Then Else Structure
1. Write a Scilab program to test whether a given number divides the other given number.
scilab
Copy code
num1 = input("Enter the first number: ");
num2 = input("Enter the second number: ");
if mod(num1, num2) == 0 then
    disp("The second number divides the first number.");
else
    disp("The second number does not divide the first number.");
end
2. Write a Scilab program to test whether a given number is even or odd.
scilab
Copy code
num = input("Enter a number: ");
if mod(num, 2) == 0 then
    disp("The number is even.");
else
    disp("The number is odd.");
end
3. Write a Scilab program to test whether a given number is purely real number or a complex number.
scilab
Copy code
num = input("Enter a number: ");
if imag(num) == 0 then
    disp("The number is purely real.");
else
    disp("The number is a complex number.");
end
4. Write a Scilab program to test whether a given number is positive, negative, or zero.
scilab
Copy code
num = input("Enter a number: ");
if num > 0 then
    disp("The number is positive.");
elseif num < 0 then
    disp("The number is negative.");
else
    disp("The number is zero.");
end
5. Write a Scilab program to test whether a given number is positive, negative, or zero using select statement.
scilab
Copy code
num = input("Enter a number: ");
select num
    case num > 0
        disp("The number is positive.");
    case num < 0
        disp("The number is negative.");
    case num == 0
        disp("The number is zero.");
end
6. Write a Scilab program to solve a Quadratic Equation 
𝑎
𝑥
2
+
𝑏
𝑥
+
𝑐
=
0
ax 
2
 +bx+c=0.
scilab
Copy code
a = input("Enter the coefficient a: ");
b = input("Enter the coefficient b: ");
c = input("Enter the coefficient c: ");
discriminant = b^2 - 4*a*c;
if discriminant > 0 then
    p = (-b + sqrt(discriminant)) / (2*a);
    q = (-b - sqrt(discriminant)) / (2*a);
    disp("The roots are real and distinct:");
    disp(p), disp(q);
elseif discriminant == 0 then
    p = -b / (2*a);
    q = p;
    disp("The roots are real and equal:");
    disp(p);
else
    realPart = -b / (2*a);
    imagPart = sqrt(-discriminant) / (2*a);
    disp("The roots are complex:");
    disp(realPart + imagPart*%i);
    disp(realPart - imagPart*%i);
end


Exercise 2.2: For Loop Program
1. Write a Scilab program to compute the sum of the first n natural numbers.
scilab
Copy code
n = input("Enter the value of n: ");
sum = 0;
for i = 1:n
    sum = sum + i;
end
disp("Sum of first n natural numbers: "), disp(sum);
2. Write a Scilab program to compute the factorial of a natural number n.
scilab
Copy code
n = input("Enter a natural number: ");
factorial = 1;
for i = 1:n
    factorial = factorial * i;
end
disp("Factorial of n: "), disp(factorial);
3. Write a Scilab program to obtain the Fibonacci sequence with n members.
scilab
Copy code
n = input("Enter the number of terms: ");
fibo = zeros(1, n);
fibo(1) = 0;
if n > 1 then fibo(2) = 1; end
for i = 3:n
    fibo(i) = fibo(i-1) + fibo(i-2);
end
disp("Fibonacci sequence: "), disp(fibo);
4. Write a Scilab program to test whether a given number is a prime number or not.
scilab
Copy code
num = input("Enter a number: ");
is_prime = %T;
for i = 2:sqrt(num)
    if mod(num, i) == 0 then
        is_prime = %F;
        break;
    end
end
if num > 1 & is_prime then
    disp("The number is a prime number.");
else
    disp("The number is not a prime number.");
end
5. Write a Scilab program using for loop to compute the sum of two given matrices if they are of comparable order.
scilab
Copy code
A = input("Enter the first matrix: ");
B = input("Enter the second matrix: ");
[m, n] = size(A);
[p, q] = size(B);
if m == p & n == q then
    C = zeros(m, n);
    for i = 1:m
        for j = 1:n
            C(i, j) = A(i, j) + B(i, j);
        end
    end
    disp("Matrix sum: "), disp(C);
else
    disp("Matrices are not of comparable order.");
end
6. Write a Scilab program using for loop to compute the matrix multiplication of two given matrices, and verify using *.
scilab
Copy code
A = input("Enter the first matrix: ");
B = input("Enter the second matrix: ");
[m, n] = size(A);
[p, q] = size(B);
if n == p then
    C = zeros(m, q);
    for i = 1:m
        for j = 1:q
            for k = 1:n
                C(i, j) = C(i, j) + A(i, k) * B(k, j);
            end
        end
    end
    disp("Matrix multiplication using for loop: "), disp(C);
    disp("Matrix multiplication using '*': "), disp(A * B);
else
    disp("Matrix dimensions are not compatible for multiplication.");
end
7. Write a Scilab program to sort a set of numbers in ascending and descending order.
scilab
Copy code
arr = input("Enter the set of numbers as a row vector: ");
ascend = gsort(arr, "g", "i");
descend = gsort(arr, "d", "i");
disp("Ascending order: "), disp(ascend);
disp("Descending order: "), disp(descend);
8. Write a Scilab program to compute the number of permutations and combinations for given values of n and r.
scilab
Copy code
n = input("Enter the value of n: ");
r = input("Enter the value of r: ");
if r > n then
    disp("Invalid input: r cannot be greater than n.");
else
    perm = prod(1:n) / prod(1:(n-r));
    comb = perm / prod(1:r);
    disp("Number of permutations: "), disp(perm);
    disp("Number of combinations: "), disp(comb);
end


Exercise 2.3: While-Loop Program
1. Write a Scilab program to find the number of digits of a natural number n.
scilab
Copy code
n = input("Enter a natural number: ");
count = 0;
while n > 0 do
    n = floor(n / 10);
    count = count + 1;
end
disp("Number of digits: "), disp(count);
2. Write a Scilab program to obtain a number with digits as the reverse of a given natural number n.
scilab
Copy code
n = input("Enter a natural number: ");
reverse = 0;
while n > 0 do
    digit = mod(n, 10);
    reverse = reverse * 10 + digit;
    n = floor(n / 10);
end
disp("Reversed number: "), disp(reverse);
3. Write a Scilab program to test whether a given number is a Palindrome.
scilab
Copy code
n = input("Enter a number: ");
original = n;
reverse = 0;
while n > 0 do
    digit = mod(n, 10);
    reverse = reverse * 10 + digit;
    n = floor(n / 10);
end
if reverse == original then
    disp("The number is a Palindrome.");
else
    disp("The number is not a Palindrome.");
end
4. Write a Scilab program to test whether a given number is an Armstrong number.
scilab
Copy code
n = input("Enter a number: ");
original = n;
sum = 0;
digits = 0;
temp = n;
while temp > 0 do
    temp = floor(temp / 10);
    digits = digits + 1;
end
while n > 0 do
    digit = mod(n, 10);
    sum = sum + digit^digits;
    n = floor(n / 10);
end
if sum == original then
    disp("The number is an Armstrong number.");
else
    disp("The number is not an Armstrong number.");
end
5. Write a Scilab program to obtain the binary equivalent of a given decimal number.
scilab
Copy code
n = input("Enter a decimal number: ");
binary = [];
while n > 0 do
    binary = [mod(n, 2), binary];
    n = floor(n / 2);
end
disp("Binary equivalent: "), disp(binary);
6. Write a Scilab program to obtain the decimal equivalent of a given binary number.
scilab
Copy code
binary = input("Enter a binary number as a row vector (e.g., [1 0 1 1]): ");
decimal = 0;
n = length(binary);
for i = 1:n
    decimal = decimal + binary(i) * 2^(n - i);
end
disp("Decimal equivalent: "), disp(decimal);
7. Write a Scilab program to compute the sum of the first n prime numbers.
scilab
Copy code
n = input("Enter the number of prime numbers to sum: ");
count = 0;
num = 2;
sum = 0;
while count < n do
    is_prime = %T;
    for i = 2:sqrt(num)
        if mod(num, i) == 0 then
            is_prime = %F;
            break;
        end
    end
    if is_prime then
        sum = sum + num;
        count = count + 1;
    end
    num = num + 1;
end
disp("Sum of first n prime numbers: "), disp(sum);


Assignment 3 functions

1. Solve a Quadratic Equation
scilab
Copy code
function [p, q] = solveQuadratic(a, b, c)
    discriminant = b^2 - 4*a*c;
    if discriminant > 0 then
        p = (-b + sqrt(discriminant)) / (2*a);
        q = (-b - sqrt(discriminant)) / (2*a);
    elseif discriminant == 0 then
        p = -b / (2*a);
        q = p;
    else
        p = -b / (2*a) + %i * sqrt(-discriminant) / (2*a);
        q = -b / (2*a) - %i * sqrt(-discriminant) / (2*a);
    end
end

[p, q] = solveQuadratic(1, -3, 2);
disp(p), disp(q);

2. Compute Sum of First n Natural Numbers
scilab
Copy code
function sum = sumNaturalNumbers(n)
    sum = 0;
    for i = 1:n
        sum = sum + i;
    end
end

sum = sumNaturalNumbers(10);
disp(sum);
3. Compute Factorial of a Natural Number
scilab
Copy code
function fact = factorial(n)
    fact = 1;
    for i = 1:n
        fact = fact * i;
    end
end

fact = factorial(5);
disp(fact);

*********************************************************************
4. Compute Sum of Two Matrices


function C = matrixSum(A, B)
    [m, n] = size(A);
    [p, q] = size(B);
    if m == p & n == q then
        C = zeros(m, n);
        for i = 1:m
            for j = 1:n
                C(i, j) = A(i, j) + B(i, j);
            end
        end
    else
        error("Matrices are not of comparable order.");
    end
end

A = [1 2; 3 4];
B = [5 6; 7 8];
C = matrixSum(A, B);
disp(C);
5. Compute Permutations and Combinations
scilab
Copy code
function [perm, comb] = permComb(n, r)
    if r > n then
        error("Invalid input: r cannot be greater than n.");
    else
        perm = prod(1:n) / prod(1:(n-r));
        comb = perm / prod(1:r);
    end
end

[perm, comb] = permComb(5, 2);
disp(perm), disp(comb);
6. Compute Sum of Digits of a Natural Number
scilab
Copy code
function sum = sumOfDigits(n)
    sum = 0;
    while n > 0 do
        sum = sum + mod(n, 10);
        n = floor(n / 10);
    end
end

sum = sumOfDigits(12345);
disp(sum);
7. Find Number of Digits in a Natural Number
scilab
Copy code
function count = numDigits(n)
    count = 0;
    while n > 0 do
        n = floor(n / 10);
        count = count + 1;
    end
end

count = numDigits(12345);
disp(count);
8. Reverse Digits of a Natural Number
scilab
Copy code
function reverse = reverseDigits(n)
    reverse = 0;
    while n > 0 do
        digit = mod(n, 10);
        reverse = reverse * 10 + digit;
        n = floor(n / 10);
    end
end

reverse = reverseDigits(12345);
disp(reverse);
9. Test if a Number is Palindrome
scilab
Copy code
function isPalindrome = testPalindrome(n)
    original = n;
    reverse = reverseDigits(n);
    isPalindrome = (original == reverse);
end

isPalindrome = testPalindrome(121);
disp(isPalindrome);
10. Test if a Number is an Armstrong Number
scilab
Copy code
function isArmstrong = testArmstrong(n)
    original = n;
    sum = 0;
    digits = numDigits(n);
    while n > 0 do
        digit = mod(n, 10);
        sum = sum + digit^digits;
        n = floor(n / 10);
    end
    isArmstrong = (sum == original);
end

isArmstrong = testArmstrong(153);
disp(isArmstrong);
11. Obtain Binary Equivalent of a Decimal Number
scilab
Copy code
function binary = decimalToBinary(n)
    binary = [];
    while n > 0 do
        binary = [mod(n, 2), binary];
        n = floor(n / 2);
    end
end

binary = decimalToBinary(13);
disp(binary);
12. Obtain Decimal Equivalent of a Binary Number
scilab
Copy code
function decimal = binaryToDecimal(binary)
    decimal = 0;
    n = length(binary);
    for i = 1:n
        decimal = decimal + binary(i) * 2^(n - i);
    end
end

decimal = binaryToDecimal([1 1 0 1]);
disp(decimal);


####################################################################################
Assignment 5 

1. Bubble Sort for 10 Numbers in Increasing Order
scilab
Copy code
function sortedArray = bubbleSort(array)
    n = length(array);
    for i = 1:n-1
        for j = 1:n-i
            if array(j) > array(j+1) then
                temp = array(j);
                array(j) = array(j+1);
                array(j+1) = temp;
            end
        end
    end
    sortedArray = array;
end

array = [12, 4, 9, 1, 15, 6, 3, 8, 5, 2];
sortedArray = bubbleSort(array);
disp(sortedArray);

**************************************************************************

2. Insertion Sort for 5 Numbers in Increasing Order
scilab
Copy code
function sortedArray = insertionSort(array)
    n = length(array);
    for i = 2:n
        key = array(i);
        j = i - 1;
        while j > 0 & array(j) > key do
            array(j+1) = array(j);
            j = j - 1;
        end
        array(j+1) = key;
    end
    sortedArray = array;
end

array = [12, 7, 5, 3, 1];
sortedArray = insertionSort(array);
disp(sortedArray);

****************************************************************************
3. Linear Search in a List of 5 Numbers


function index = linearSearch(array, numToFind)
    index = -1; // Default if not found
    for i = 1:length(array)
        if array(i) == numToFind then
            index = i;
            break;
        end
    end
end

array = [3, 8, 7, 2, 10];
numToFind = input("Enter the number to search: ");
index = linearSearch(array, numToFind);
if index == -1 then
    disp("Number not found.");
else
    disp("Number found at position: "), disp(index);
end

*********************************************************************
4. Binary Search in a List of 5 Numbers
Note: Binary search requires the array to be sorted.

scilab
Copy code
function index = binarySearch(array, numToFind)
    low = 1;
    high = length(array);
    index = -1; // Default if not found
    while low <= high do
        mid = floor((low + high) / 2);
        if array(mid) == numToFind then
            index = mid;
            break;
        elseif array(mid) < numToFind then
            low = mid + 1;
        else
            high = mid - 1;
        end
    end
end

array = [1, 3, 5, 7, 9]; // Already sorted array
numToFind = input("Enter the number to search: ");
index = binarySearch(array, numToFind);
if index == -1 then
    disp("Number not found.");
else
    disp("Number found at position: "), disp(index);
end


###############################################################################

Assignment 5 

1. Merge Sort for 5 Numbers in Increasing Order

function sortedArray = mergeSort(array)
    
    mid = floor(length(array) / 2); 
    left = array(1:mid);
    right = array(mid+1:$);

    sortedLeft = mergeSort(left);
    sortedRight = mergeSort(right);

    sortedArray = merge(sortedLeft, sortedRight);
end

function mergedArray = merge(left, right)
    mergedArray = [];
    while ~isempty(left) & ~isempty(right) do
        if left(1) <= right(1) then
            mergedArray = [mergedArray, left(1)];
            left(1) = [];
        else
            mergedArray = [mergedArray, right(1)];
            right(1) = [];
        end
    end
    mergedArray = [mergedArray, left, right];
end

array = [5, 3, 8, 1, 2];
sortedArray = mergeSort(array);
disp(sortedArray);

******************************************************************

@#$2. Nuts & Bolts Problem Using Quick Sort

function [sortedNuts, sortedBolts] = matchNutsBolts(nuts, bolts)
    if length(nuts) <= 1 then
        sortedNuts = nuts;
        sortedBolts = bolts;
        return;
    end

    pivotNut = nuts(1); // Choose the first nut as the pivot
    [lessBolts, equalBolt, greaterBolts] = partitionBolts(bolts, pivotNut);
    [lessNuts, equalNut, greaterNuts] = partitionNuts(nuts, equalBolt);

    [sortedLessNuts, sortedLessBolts] = matchNutsBolts(lessNuts, lessBolts);
    [sortedGreaterNuts, sortedGreaterBolts] = matchNutsBolts(greaterNuts, greaterBolts);

    sortedNuts = [sortedLessNuts, equalNut, sortedGreaterNuts];
    sortedBolts = [sortedLessBolts, equalBolt, sortedGreaterBolts];
end

function [less, equal, greater] = partitionBolts(bolts, nut)
    less = [];
    equal = [];
    greater = [];
    for bolt = bolts
        if bolt < nut then
            less = [less, bolt];
        elseif bolt == nut then
            equal = bolt;
        else
            greater = [greater, bolt];
        end
    end
end

function [less, equal, greater] = partitionNuts(nuts, bolt)
    less = [];
    equal = [];
    greater = [];
    for nut = nuts
        if nut < bolt then
            less = [less, nut];
        elseif nut == bolt then
            equal = nut;
        else
            greater = [greater, nut];
        end
    end
end

nuts = [5, 3, 1, 4, 2];
bolts = [3, 5, 2, 1, 4];

[sortedNuts, sortedBolts] = matchNutsBolts(nuts, bolts);
disp("Sorted Nuts: "), disp(sortedNuts);
disp("Sorted Bolts: "), disp(sortedBolts);


###########################################################################


Assignment 6 

Gereedy method

cost = [
    10, 15, 20, 25;
    15, 25, 30, 35;
    20, 35, 40, 50;
    25, 30, 35, 40
];

function [assignment, minCost] = solveAssignmentProblem(costMatrix)
    [n, m] = size(costMatrix);
    if n ~= m then
        error("Number of workers and jobs must be equal");
    end
    [assignment, minCost] = linear_sum_assignment(costMatrix);
    assignment = assignment + 1;
end

[assignment, minCost] = solveAssignmentProblem(cost);

disp("Optimal Job Assignments (Worker -> Job):");
disp(assignment);

disp("Minimum Total Cost:");
disp(minCost);


#####################################################################

Assignment 7

1. maze problem

function path = solveMaze(maze)
    [n, m] = size(maze);
    path = [];
    visited = zeros(n, m);

    function isSafe(x, y)
        return x >= 1 && x <= n && y >= 1 && y <= m && maze(x, y) == 0 && visited(x, y) == 0;
    end

    function dfs(x, y, currentPath)
        if x == n && y == m then
            path = currentPath;
            return;
        end

        visited(x, y) = 1;
        directions = [[0, 1]; [1, 0]; [0, -1]; [-1, 0]]; // Right, Down, Left, Up

        for i = 1:4
            nx = x + directions(i, 1);
            ny = y + directions(i, 2);

            if isSafe(nx, ny) then
                dfs(nx, ny, [currentPath; [nx, ny]]);
                if ~isempty(path) then
                    return;
                end
            end
        end

        visited(x, y) = 0;  // Backtrack if no path is found
    end

    dfs(1, 1, [1, 1]);
end

// Example maze (0 = open, 1 = wall)
maze = [
    0, 1, 0, 0, 0;
    0, 1, 0, 1, 0;
    0, 0, 0, 1, 0;
    1, 1, 0, 0, 0;
    0, 0, 0, 1, 0
];

path = solveMaze(maze);
if isempty(path) then
    disp("No path found.");
else
    disp("Path found:");
    disp(path);
end
 
********************************************************************

2. graph coloring 

function [chromaticNumber, coloring] = graphColoring(adjMatrix)
    [n, m] = size(adjMatrix);
    coloring = -ones(1, n);
    coloring(1) = 0;

    for v = 2:n
        available = ones(1, n);
        for u = 1:v-1
            if adjMatrix(v, u) == 1 & coloring(u) != -1 then
                available(coloring(u) + 1) = 0;
            end
        end
        
        color = find(available, 1) - 1;
        coloring(v) = color;
    end
    
    chromaticNumber = max(coloring) + 1;
end

adjMatrix = [
    0, 1, 0, 1, 0;
    1, 0, 1, 0, 1;
    0, 1, 0, 0, 1;
    1, 0, 0, 0, 1;
    0, 1, 1, 1, 0
];

[chromaticNumber, coloring] = graphColoring(adjMatrix);

disp("Chromatic Number (Minimum Time Slots Needed):");
disp(chromaticNumber);

disp("Coloring of subjects (time slots assigned to each subject):");
disp(coloring);


################################################################

Assignment 8

1. Given a set of cities and distance between every pair of cities, the problem is
to find the shortest possible tour that visits every city exactly once and returns to the startingpoint.

function [minTour, minDistance] = travelingSalesmanBruteForce(distMatrix)
    [n, m] = size(distMatrix);
    cities = 1:n;
    minTour = [];
    minDistance = %inf;
    
    perm = perms(cities);
    
    for i = 1:size(perm, 1)
        tour = perm(i, :);
        tourDistance = 0;
        
        for j = 1:(n - 1)
            tourDistance = tourDistance + distMatrix(tour(j), tour(j + 1));
        end
        tourDistance = tourDistance + distMatrix(tour(n), tour(1));
        
        if tourDistance < minDistance then
            minDistance = tourDistance;
            minTour = tour;
        end
    end
end

distMatrix = [
    0, 10, 15, 20, 25;
    10, 0, 35, 25, 30;
    15, 35, 0, 30, 5;
    20, 25, 30, 0, 15;
    25, 30, 5, 15, 0
];

[minTour, minDistance] = travelingSalesmanBruteForce(distMatrix);

disp("Optimal Tour:");
disp(minTour);
disp("Minimum Distance of the Tour:");
disp(minDistance);


***************************************************

2. Generate a binary string of length N using branch and bound technique.
(Input: N = 3 Output: 000 001 010 011 100 101 110 111 Explanation:
Numbers with 3
binary digits are 0, 1, 2, 3, 4, 5, 6, 7 Input: N = 2 Output: 00 01 10 11)

function generateBinaryStrings(N)
    queue = [];
    queue = [queue; ""];
    
    while size(queue, 1) > 0
        currentString = queue(1, :);
        queue = queue(2:$, :);
        
        if length(currentString) == N then
            disp(currentString);
        else
            queue = [queue; currentString + "0"];
            queue = [queue; currentString + "1"];
        end
    end
end

N = 3;
generateBinaryStrings(N);
